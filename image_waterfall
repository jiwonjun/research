# -*- coding: utf-8 -*-
from scene import *
from random import *
from time import time
from PIL import Image
import re
import speech
import sound
import copy
import string

from bs4 import BeautifulSoup
import webbrowser
from evernote.api.client import EvernoteClient
import evernote.edam.type.ttypes as Types
import evernote.edam.notestore.ttypes as NoteTypes

class MyScene (Scene):
	def setup(self):
		
		# This will be called before the first frame is drawn.
		# Set up the root layer and one other layer:
		self.root_layer = Layer(self.bounds)
		center = self.bounds.center()
		
		self.change_bg_color()
		
		self.txt_layers = []
		
		for i in range(6):
			self.txt_layers.append(TextLayer('','Helvetica', 40))
			self.root_layer.add_layer(self.txt_layers[i])
		
		self.curr_text_layer = 0
		self.last_time = self.lastbg_time = time()
		self.wait_time = randint(1,4)
		self.speak_time = randint(2,4)
		self.waitbg_time = 10
		self.speech_count = 0
		
		

		self.images = self.get_evernote_data("images",'option')

		
	
	def draw(self):
		# Update and draw our root layer. For a layer-based scene, this
		# is usually all you have to do in the draw method.
		new_time = time()
		if new_time - self.last_time > self.wait_time:
			self.show_image()
			self.last_time = new_time
			self.wait_time = random() * 2 + 4.0
			
		background(0, 0, 0)
		self.root_layer.update(self.dt)
		self.root_layer.draw()
	
	def touch_began(self, touch):
		print('touch')
		
	def change_bg_color(self):
		new_color = Color(random(), random(), random())
		self.root_layer.animate('background', new_color, 1.0)
	
	def touch_moved(self, touch):
		pass
	
	def touch_ended(self, touch):
		pass
		
	def show_image(self):
		
		
		#sentence = choice(self.personality) + " " + choice(self.sentences)
		
		img = choice(self.images).copy()
		
		#img = Image.open(img_name)
		#img = img.convert('RGBA')
		#resize to a random size
		size = randint(150,600)
		
		dims = size,size
		img.thumbnail(dims,Image.ANTIALIAS)
		
		
		imgW, imgH = img.size
		
		self.img = load_pil_image(img)
		
		new_layer = Layer(Rect(0,0,imgW,imgH))
		new_layer.image = self.img
		
		
		sound.play_effect('Woosh_1')

		self.root_layer.remove_layer(self.txt_layers[self.curr_text_layer])
		self.txt_layers[self.curr_text_layer] = new_layer
		txt_layer = self.txt_layers[self.curr_text_layer]
		
		self.root_layer.add_layer(txt_layer)

		txt_layer.frame.x = randint(0,600)
		txt_layer.frame.y = randint(400,790)
		
		from_frame = txt_layer.frame
		
		to_frame = Rect(from_frame.x, from_frame.y - 1000,from_frame.w, from_frame.h)
		txt_layer.animate('frame', to_frame, duration=randint(8,15), completion=self.animate_end(txt_layer))
		
		self.curr_text_layer += 1
		if self.curr_text_layer >= len(self.txt_layers):
			self.curr_text_layer = 0
		
	def animate_end(self,layer):
		layer.remove_all_animations()
		
	def getMediaType(self,enMedia):
		if enMedia == "":
			return
		index = enMedia.find("/")+1
		print("image type: ", enMedia[index:])
		return enMedia[index:]

	def get_evernote_data(self, notebook_select, option):

		all_images = []

		dev_token = "S=s1:U=1dbf3:E=14bd7f40e76:C=1448042e278:P=1cd:A=en-devtoken:V=2:H=875a21f7236fddde2961cd72c4688269"
		client = EvernoteClient(token=dev_token)
		 
		# userstore
		userStore = client.get_user_store()
		user = userStore.getUser()
		 
		# notestore & notebooks
		noteStore = client.get_note_store()
		notebooks = noteStore.listNotebooks()

		for notebook in notebooks:
			print notebook.name
			# for now get exact notebook name, later maybe get multiple notebooks
			if notebook_select == notebook.name: 
				
				filter = NoteTypes.NoteFilter()
				filter.notebookGuid = notebook.guid
				#filter.words = "animism"
				#spec = NoteTypes.NotesMetadataResultSpec()
				#spec.includeTitle = True
				notes = noteStore.findNotes(dev_token, filter, 0, 50)

				for note in notes.notes:
					print note.title
					noteContent = noteStore.getNoteContent(dev_token, note.guid ) 
					#print noteContent

					for res in note.resources:
						print("guid is: " + res.guid)
						print("width is: ", res.width)
						print("height is: ", res.height)
						attachment = noteStore.getResource(dev_token, res.guid, True, False, True, False)
						fileType = self.getMediaType(res.mime)
						fileName = res.guid + "." + fileType
						print(fileName)
						attachmentFile = open(fileName, "wb")
						attachmentFile.write(attachment.data.body)
						attachmentFile.close()
						
						img = Image.open(fileName)
						img = img.convert('RGBA')
						
						
						all_images.append(img)

						#im = Image.open(fileName)
						#im.rotate(45).show()

						

		return all_images



run(MyScene())
